# -*- coding: utf-8 -*-
"""citypopde.ipynb

Author: Rohan Dawar
Email: dawar.rohan1@gmail.com

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHmVmHeJGHhIouJZOe3mt1yZJxZF3AIv

## THE GOAL OF THIS SCRIPT:

Given a link from https://www.citypopulation.de/  
Return a pandas dataframe of the cities with populations and coordinates  
returncoords sub-function: given citypop.de city page, return lat,long coordinates
"""

# Dependencies:
from bs4 import BeautifulSoup
import requests
import pandas as pd

# Base URL & Extensions
baseurl = 'https://www.citypopulation.de'
ext_usa_cities = '/en/usa/cities/'
ext_can_cities = '/en/canada/agglo/'

def buildDF(tableURL):
  """
  Given URL of citypopulation.de city page
  Return a pandas dataframe with rows including city name, latest population estimate, and href link to city page
  """
  r = requests.get(tableURL)
  soup = BeautifulSoup(r.text, 'html.parser')
  soup3 = soup.find_all(itemtype="http://schema.org/City")
  df = pd.DataFrame(columns=["citystate", "pop", "link"])
  for i in range(len(soup3)):
    pop = soup3[i].find("td", class_="rpop prio1").text
    pop = int(pop.replace(",",''))
    tree = soup3[i].find_all("td")
    href = tree[-1].find('a')['href']
    name = soup3[i].find("td", class_="rname").text
    df = df.append({'citystate' : name, 'pop' : pop, 'link' : href}, ignore_index = True)
  return df

"""### Coordinate Extraction"""

def returncoords(cityurl):
  """
  Given URL of citypopulation.de city page
  Return tuple form, decimal notation (longitude, latitude) coordinates of city
  !!! TO DO: re-write fn using 'http://schema.org/City' geo attr rather than string splitting
  """
  r = requests.get(cityurl)
  soup = BeautifulSoup(r.text, 'html.parser')
  mainscriptTag = soup.find("script")
  checkHREF = list(mainscriptTag.children)[0]
  if not 'window.location.href' in checkHREF:
    longstring = str(mainscriptTag).split(';')[6]
    latstring = str(mainscriptTag).split(';')[7]
    longi = float(longstring.split('=')[-1].strip())
    lat = float(latstring.split('=')[-1].strip())
    return (longi, lat)
  else:
    return None

def buildCoordDF(tableURL):
  '''
  Given URL of citypopulation.de city page
  Build a pandas dataframe including city name, latest population estimate,
  href to city page and tuple form, decimal notation (longitude, latitude) coordinates of city
  Drops redirected city pages
  '''
  df = buildDF(tableURL)
  df['coords'] = df['link'].apply(lambda x: returncoords(baseurl+x))
  return df.dropna()

buildCoordDF(baseurl+ext_usa_cities)